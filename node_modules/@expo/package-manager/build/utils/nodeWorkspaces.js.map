{"version":3,"file":"nodeWorkspaces.js","sourceRoot":"","sources":["../../src/utils/nodeWorkspaces.ts"],"names":[],"mappings":";;;;;;AAAA,qCAA6C;AAC7C,wFAAkE;AAClE,2BAAgC;AAChC,gDAAwB;AAIX,QAAA,aAAa,GAAG,mBAAmB,CAAC;AACpC,QAAA,cAAc,GAAG,WAAW,CAAC;AAC7B,QAAA,cAAc,GAAG,gBAAgB,CAAC;AAClC,QAAA,mBAAmB,GAAG,qBAAqB,CAAC;AAEzD;;;;GAIG;AACH,SAAS,qBAAqB,CAAC,WAAmB;;IAChD,MAAM,gBAAgB,GAAG,0BAA0B,CAAC;IAEpD,MAAM,iBAAiB,GACrB,MAAA,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,mCAAI,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC,CAAC;IAC/E,MAAM,gBAAgB,GAAG,iBAAiB;QACxC,CAAC,CAAC,cAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,2BAAmB,CAAC;QACnD,CAAC,CAAC,IAAA,cAAU,EAAC,2BAAmB,EAAE,EAAE,GAAG,EAAE,WAAW,EAAE,CAAC,CAAC;IAE1D,OAAO,gBAAgB,CAAC,CAAC,CAAC,cAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;AAClE,CAAC;AAED;;;;;;;;GAQG;AACH,SAAgB,iBAAiB,CAC/B,WAAmB,EACnB,cAAmC;IAEnC,MAAM,UAAU,GAAuE;QACrF,GAAG,EAAE,kCAA0B;QAC/B,IAAI,EAAE,kCAA0B;QAChC,IAAI,EAAE,qBAAqB;KAC5B,CAAC;IAEF,IAAI,cAAc,EAAE;QAClB,OAAO,UAAU,CAAC,cAAc,CAAC,CAAC,WAAW,CAAC,CAAC;KAChD;IAED,KAAK,MAAM,QAAQ,IAAI,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE;QAChD,MAAM,IAAI,GAAG,QAAQ,CAAC,WAAW,CAAC,CAAC;QACnC,IAAI,IAAI;YAAE,OAAO,IAAI,CAAC;KACvB;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AApBD,8CAoBC;AAED;;;;;;;;;GASG;AACH,SAAgB,qBAAqB,CACnC,WAAmB,EACnB,cAAmC;IAEnC,MAAM,aAAa,GAAG,iBAAiB,CAAC,WAAW,EAAE,cAAc,CAAC,IAAI,WAAW,CAAC;IACpF,MAAM,aAAa,GAAuC;QACxD,GAAG,EAAE,qBAAa;QAClB,IAAI,EAAE,sBAAc;QACpB,IAAI,EAAE,sBAAc;KACrB,CAAC;IAEF,IAAI,cAAc,EAAE;QAClB,MAAM,YAAY,GAAG,cAAI,CAAC,IAAI,CAAC,aAAa,EAAE,aAAa,CAAC,cAAc,CAAC,CAAC,CAAC;QAC7E,IAAI,IAAA,eAAU,EAAC,YAAY,CAAC;YAAE,OAAO,cAAc,CAAC;QACpD,OAAO,IAAI,CAAC;KACb;IAED,KAAK,MAAM,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,aAAa,CAAyB,EAAE;QACxE,MAAM,YAAY,GAAG,cAAI,CAAC,IAAI,CAAC,aAAa,EAAE,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC;QACtE,IAAI,IAAA,eAAU,EAAC,YAAY,CAAC;YAAE,OAAO,OAAO,CAAC;KAC9C;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAvBD,sDAuBC","sourcesContent":["import { sync as findUpSync } from 'find-up';\nimport findYarnOrNpmWorkspaceRoot from 'find-yarn-workspace-root';\nimport { existsSync } from 'fs';\nimport path from 'path';\n\nimport type { NodePackageManager } from '../NodePackageManagers';\n\nexport const NPM_LOCK_FILE = 'package-lock.json';\nexport const YARN_LOCK_FILE = 'yarn.lock';\nexport const PNPM_LOCK_FILE = 'pnpm-lock.yaml';\nexport const PNPM_WORKSPACE_FILE = 'pnpm-workspace.yaml';\n\n/**\n * Find the `pnpm-workspace.yaml` file that represents the root of the monorepo.\n * This is a synchronous function based on the original async library.\n * @see https://github.com/pnpm/pnpm/blob/main/packages/find-workspace-dir/src/index.ts\n */\nfunction findPnpmWorkspaceRoot(projectRoot: string) {\n  const workspaceEnvName = 'NPM_CONFIG_WORKSPACE_DIR';\n\n  const workspaceEnvValue =\n    process.env[workspaceEnvName] ?? process.env[workspaceEnvName.toLowerCase()];\n  const manifestLocation = workspaceEnvValue\n    ? path.join(workspaceEnvValue, PNPM_WORKSPACE_FILE)\n    : findUpSync(PNPM_WORKSPACE_FILE, { cwd: projectRoot });\n\n  return manifestLocation ? path.dirname(manifestLocation) : null;\n}\n\n/**\n * Resolve the workspace root for a project, if its part of a monorepo.\n * Optionally, provide a specific packager to only resolve that one specifically.\n *\n * By default, this tries to resolve the workspaces in order of:\n *  - npm\n *  - yarn\n *  - pnpm\n */\nexport function findWorkspaceRoot(\n  projectRoot: string,\n  packageManager?: NodePackageManager\n): string | null {\n  const strategies: Record<NodePackageManager, (projectRoot: string) => string | null> = {\n    npm: findYarnOrNpmWorkspaceRoot,\n    yarn: findYarnOrNpmWorkspaceRoot,\n    pnpm: findPnpmWorkspaceRoot,\n  };\n\n  if (packageManager) {\n    return strategies[packageManager](projectRoot);\n  }\n\n  for (const strategy of Object.values(strategies)) {\n    const root = strategy(projectRoot);\n    if (root) return root;\n  }\n\n  return null;\n}\n\n/**\n * Resolve the used node package manager for a project by checking the lockfile.\n * This also tries to resolve the workspace root, if its part of a monorepo.\n * Optionally, provide a specific packager to only resolve that one specifically.\n *\n * By default, this tries to resolve the workspaces in order of:\n *  - npm\n *  - yarn\n *  - pnpm\n */\nexport function resolvePackageManager(\n  projectRoot: string,\n  packageManager?: NodePackageManager\n): NodePackageManager | null {\n  const workspaceRoot = findWorkspaceRoot(projectRoot, packageManager) || projectRoot;\n  const lockfileNames: Record<NodePackageManager, string> = {\n    npm: NPM_LOCK_FILE,\n    yarn: YARN_LOCK_FILE,\n    pnpm: PNPM_LOCK_FILE,\n  };\n\n  if (packageManager) {\n    const lockfilePath = path.join(workspaceRoot, lockfileNames[packageManager]);\n    if (existsSync(lockfilePath)) return packageManager;\n    return null;\n  }\n\n  for (const manager of Object.keys(lockfileNames) as NodePackageManager[]) {\n    const lockfilePath = path.join(workspaceRoot, lockfileNames[manager]);\n    if (existsSync(lockfilePath)) return manager;\n  }\n\n  return null;\n}\n"]}